{"version":3,"sources":["components/TodoView.jsx","components/ToggleView.jsx","components/TodoList.jsx","store/ObservableTodoStore.jsx","index.jsx"],"names":["TodoView","observer","props","setEditable","event","setState","editable","target","focus","onToggleCompleted","todo","completed","onRename","task","innerText","onDestroy","taskId","state","this","className","type","checked","onChange","onDoubleClick","contentEditable","onBlur","onClick","React","Component","ToggleView","setView","activeView","setViewFn","TodoList","onNewTodo","preventDefault","store","addTodo","newTask","onRemoveTodo","idx","removeTodo","returnActiveTab","todos","map","key","completedTodos","activeTodos","handleChange","bind","onSubmit","id","value","placeholder","ObservableTodoStore","push","idxToDel","filter","decorate","observable","computed","observableTodoStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.61c08792.chunk.js","sourcesContent":["import React from 'react';\nimport { observer } from \"mobx-react\";\nimport '../todomvc-app-css/index.css';\nimport './TodoView.css';\n\nconst TodoView = observer(class TodoView extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {editable:false};\n  }\n  render() {\n    const todo = this.props.todo;\n    return (\n            <li>\n                <div className=\"view\">\n                    <input\n                        className=\"toggle\"\n                        type=\"checkbox\"\n                        checked={todo.completed}\n                        onChange={this.onToggleCompleted}\n                    />\n                    <label \n                      className={todo.completed? \"completed\": \"\"} \n                      onDoubleClick={this.setEditable} \n                      contentEditable={this.state.editable} \n                      onBlur={this.onRename}>\n                        {todo.task}\n                    </label>\n                    <button className=\"destroy\" onClick={this.onDestroy} />\n                </div>\n            </li>\n    );\n  }\n\n  setEditable = (event) =>{\n    this.setState({editable: true});\n    event.target.focus();\n  }\n\n  onToggleCompleted = () => {\n    const todo = this.props.todo;\n    todo.completed = !todo.completed;\n  }\n\n  onRename = (event) => {\n    const todo = this.props.todo;\n    todo.task = event.target.innerText\n    this.setState({editable: false})\n  }\n\n  onDestroy = () => {\n    // const todo = this.props.todo;\n    this.props.onDestroy(this.props.taskId);\n  }\n})\n\n\nexport default TodoView;","import React from 'react';\nimport { observer } from \"mobx-react\";\nimport '../todomvc-app-css/index.css';\nimport './ToggleView.css';\n\nconst ToggleView = observer(class ToggleView extends React.Component {\n  render() {\n    return (\n      <div className=\"toggle-switch\">\n        <span onClick={ () => {this.setView(\"allTask\")} } > All </span>\n        <span onClick={ () => {this.setView(\"activeTask\")} } > Active </span>\n        <span onClick={ () => {this.setView(\"completeTask\")} } > Completed </span>\n        <div> (double-click a todo to edit)</div>\n      </div>\n    );\n  }\n\n  setView (activeView) {\n    this.props.setViewFn(activeView)\n  }\n})\n\nexport default ToggleView;","import React from 'react'\nimport TodoView from './TodoView'\nimport ToggleView from './ToggleView'\nimport { observer } from \"mobx-react\";\nimport '../todomvc-app-css/index.css';\nimport './TodoList.css';\n\nconst TodoList = observer(class TodoList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {newTask:''};\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  render() {\n    const store = this.props.store;\n    return (\n      <div>\n        <form className=\"newTaskForm\" onSubmit={this.onNewTodo}>\n          <input id='addTodoInput' type='text' onChange={this.handleChange} value={this.state.newTask} placeholder=\"Enter TodoTask\"></input>\n          <button type='submit'>Add Todo</button>\n        </form>\n\n      <ToggleView setViewFn={this.setView}></ToggleView>\n      {this.returnActiveTab(store)}\n    \n      </div>\n    );\n  }\n\n  handleChange(event) {\n    this.setState({newTask: event.target.value});\n  }\n\n  onNewTodo = (event) => {\n    event.preventDefault();\n    this.props.store.addTodo(this.state.newTask);\n    this.setState({newTask: ''});\n  }\n\n  onRemoveTodo = (idx) => {\n    this.props.store.removeTodo(idx);\n  }\n\n  returnActiveTab = (store) => {\n    switch(store.activeView){\n      case \"allTask\":\n        return (\n        <ul className='todo-list'>\n          AllTask: { store.todos.map(\n          (todo, idx) => <TodoView onDestroy={this.onRemoveTodo} todo={ todo } key={ idx } taskId={idx} />\n          )}\n        </ul>\n        );\n\n      case \"completeTask\":\n          return(\n          <ul className='todo-list'>\n            Completed: { store.completedTodos.map(\n            (todo, idx) => <TodoView onDestroy={this.onRemoveTodo} todo={ todo } key={ idx } taskId={idx}/>\n          )}\n        </ul>\n        );\n\n      case \"activeTask\":\n        return(\n          <ul className='todo-list'>\n            Active: { store.activeTodos.map(\n            (todo, idx) => <TodoView onDestroy={this.onRemoveTodo} todo={ todo } key={ idx } taskId={idx}/>\n            )}\n          </ul>)\n      default:\n    }\n  }\n\n  setView = (activeView) => {\n    this.props.store.activeView = activeView;\n  }\n});\n\nexport default TodoList;","\nimport {observable, computed, decorate} from \"mobx\";\n\nclass ObservableTodoStore {\n\t// observable\n\ttodos = []\n\tactiveView = \"allTask\"\n\n\t// computed\n    get completedTodos() {\n    \treturn this.todos.filter(\n\t\t\ttodo => todo.completed === true\n\t\t);\n\t}\n\t\n\t// computed\n    get activeTodos() {\n    \treturn this.todos.filter(\n\t\t\ttodo => todo.completed === false\n\t\t);\n    }\n\n\taddTodo(task) {\n\t\tthis.todos.push({\n\t\t\ttask: task,\n\t\t\tcompleted: false,\n\t\t\t// assignee: null\n\t\t});\n    }\n    \n    removeTodo(idxToDel) {\n        this.todos = this.todos.filter((todo, idx) => idx !== idxToDel);\n\t}\n}\n\ndecorate(ObservableTodoStore, {\n\ttodos: observable,\n\tactiveView: observable,\n    completedTodos: computed,\n    activeTodos: computed,\n});\n\nexport default ObservableTodoStore;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport TodoList from './components/TodoList'\nimport ObservableTodoStore from './store/ObservableTodoStore'\n\nconst observableTodoStore = new ObservableTodoStore();\n\nReactDOM.render(\n  <TodoList store={ observableTodoStore } />,\n  document.getElementById('root')\n);"],"sourceRoot":""}